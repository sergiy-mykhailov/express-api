openapi: 3.0.0

info:
  title: express-api
  description: Express REST API
  version: 0.0.1

servers:
  - url: http://localhost:8080/api
    description: Development server

paths:
  /ping:
    get:
      summary: Testing API request
      tags:
        - ping
      security: [] # To remove a top-level security declaration, an empty array can be used.
      responses:
        '200':
          description: API response
          content:
            text/plain:
              schema:
                type: string
                example: pong

  /auth/register:
    post:
      summary: Register a new user.
      tags:
        - auth
      security: [] # To remove a top-level security declaration, an empty array can be used.
      requestBody:
        $ref: '#/components/requestBodies/RegisterUser'
      responses:
        '200':
          description: Created user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatedUser'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/ServerError'

  /auth/login:
    post:
      summary: Logs in the user.
      tags:
        - auth
      security: [] # To remove a top-level security declaration, an empty array can be used.
      requestBody:
        $ref: '#/components/requestBodies/LoginUser'
      responses:
        '200':
          description: Authorized user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoggedInUser'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/ServerError'

  /auth/logout:
    get:
      summary: Logs out the user.
      tags:
        - auth
      responses:
        '204':
          description: User logged out.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/ServerError'

tags:
  - name: ping
    description: Test endpoint
  - name: auth
    description: Authentication
  - name: user
    description: User management

security:
  - bearerAuth: []

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  requestBodies:
    RegisterUser:
      required: true
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/CreateUser'
    LoginUser:
      required: true
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/LoginUser'

  responses:
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            status: 400
            message: Bad Request
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            status: 401
            message: Unauthorized or access token is invalid/expired
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            status: 404
            message: Not found
    Conflict:
      description: Conflict
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            status: 409
            message: Conflict
    ValidationError:
      description: Validation error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ValidationErrors'
    NotImplemented:
      description: Not Implemented
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            status: 501
            message: Not Implemented
    ServerError:
      description: Unexpected server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            status: 500
            message: Something went wrong :(

  schemas:
    Roles:
      type: enum
      enum:
        - user
        - admin
      example: user
    CreateUser:
      type: object
      properties:
        username:
          type: string
          example: johnconnor
        email:
          type: string
          format: email
          example: john.connor@skynet.com
        password:
          type: string
          example: johnconnor123
        confirmPassword:
          type: string
          example: johnconnor123
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Connor
      required:
        - username
        - email
        - password
        - confirmPassword
    CreatedUser:
      type: object
      properties:
        username:
          type: string
          example: johnconnor
        email:
          type: string
          example: john.connor@skynet.com
        password:
          type: string
          example: johnconnor123
        confirmPassword:
          type: string
          example: johnconnor123
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Connor
        id:
          type: string
          example: 711627fd-84ff-493d-88ac-fa9804727bc7
        createdAt:
          type: date
          example: '2020-01-30 12:51:21.749000'
        updatedAt:
          type: date
          example: '2020-01-30 12:51:21.749000'
        role:
          $ref: '#/components/schemas/Roles'
    LoginUser:
      type: object
      properties:
        username:
          type: string
          example: johnconnor
        password:
          type: string
          example: johnconnor123
      required:
        - username
        - password
    LoggedInUser:
      type: object
      properties:
        username:
          type: string
          example: johnconnor
        email:
          type: string
          example: john.connor@skynet.com
        password:
          type: string
          example: johnconnor123
        confirmPassword:
          type: string
          example: johnconnor123
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Connor
        id:
          type: string
          example: 711627fd-84ff-493d-88ac-fa9804727bc7
        createdAt:
          type: date
          example: '2020-01-30 12:51:21.749000'
        updatedAt:
          type: date
          example: '2020-01-30 12:51:21.749000'
        role:
          $ref: '#/components/schemas/Roles'
        token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIwIiwiaWF0IjowfQ.8c6CkxLOM_ojXisFccYfvq7SpanZxkl1CycJayPhRHY
        refreshToken:
          type: string
          example: F5CJVtIr1wEs_oqIKdNDTFAjcD6nvou-lqS31K
    Error:
      type: object
      properties:
        status:
          type: number
          example: XXX
        message:
          type: string
          example: Something went wrong :(
    ValidationErrors:
      type: object
      properties:
        status:
          type: number
          example: 422
        message:
          type: string
          example: Validation error
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ValidationError'
          description: Array of error objects
    ValidationError:
      type: object
      properties:
        msg:
          type: string
          example: Cannot be empty
        param:
          type: string
          example: username
        location:
          type: string
          example: body
